datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]

  forms         Form[]
  formResponses Response[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// Define the Form model
model Form {
  id     String @id @default(uuid())
  userId String

  title       String

  sections  Section[]
  responses Response[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// Define the Section model
model Section {
  id     String @id @default(uuid())
  formId String

  title       String
  description String
  order       Int
  questions   Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  form Form @relation(fields: [formId], references: [id])
}

// Define the Question model
model Question {
  id        String @id @default(uuid())
  sectionId String

  type     String
  content  String?
  required Boolean
  order    Int

  options   Option[]
  responses Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  section Section @relation(fields: [sectionId], references: [id])
}

// Define the Option model
model Option {
  id         String @id @default(uuid())
  questionId String

  value String
  order Int

  responses Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question Question @relation(fields: [questionId], references: [id])
}

model Response {
  id     String  @id @default(uuid())
  userId String?
  formId String

  answers Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  form Form @relation(fields: [formId], references: [id])
  user User? @relation(fields: [userId], references: [id])
}

// Define the Response model
model Answer {
  id         String @id @default(uuid())
  questionId String
  responseId String

  value String

  options Option[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question Question @relation(fields: [questionId], references: [id])
  response Response @relation(fields: [responseId], references: [id])
}
